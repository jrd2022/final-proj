{"version":3,"sources":["components/EndGame.js","components/Header.js","components/Question.js","App.js","reportWebVitals.js","index.js"],"names":["EndGame","score","joke","refreshPage","className","setup","delivery","onClick","Header","question","Question","handleAnswer","handleNextQuestion","showAnswers","result","correct_answer","answers","dangerouslySetInnerHTML","__html","map","answer","bgColor","textColor","App","useState","questions","setQuestions","currentIndex","setCurrentIndex","setScore","gameOver","setGameOver","setShowAnswers","undefined","setJoke","useEffect","a","axios","questionaire","data","results","incorrect_answers","sort","Math","random","fetchData","length","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f80484c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst EndGame = ({score, joke, refreshPage}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"text-black-800 text-center p-10 font-bold\">\r\n                <h1 className=\"text-8xl\"> Game Over! </h1>\r\n                    <div className=\"underline mt-10 text-6xl\">\r\n                        Your score was {score}! \r\n                    </div>  \r\n            </div>\r\n            {score >= 7 ? (\r\n            <div className=\"text-3xl\">\r\n                <h2 className=\"text-black-800 font-bold text-center\">Congrulations! You passed! You get a joke! </h2>\r\n                <div className=\"bg-white text-center p-10 rounded-lg shadow-lg ring-4 mt-10 \">                           \r\n                    <p className=\"text-blue-500\">{joke.setup} {joke.delivery}</p>\r\n                </div>\r\n            </div>\r\n            ): (\r\n            <div className=\"bg-white text-center p-10 rounded-lg shadow-lg ring-4 mt-6 text-3xl width: fit-content\">\r\n                <h2> You didn't pass! No joke for you! LOL</h2>\r\n            </div>\r\n            )}\r\n            <div className=\"flex justify-center items-center\">\r\n                <button onClick={refreshPage} className=\"bg-blue-500 text-white font-bold text-center p-10 rounded-lg shadow-lg ring-4 mt-10 text-2xl \">\r\n                    Start New Game! \r\n                </button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EndGame\r\n","import React from 'react'\r\n\r\nconst Header = ({score, question}) => {\r\n    return (\r\n        <div>\r\n            <p className=\" text-5xl text-center font-bold\">Computer Science Trivia GAME!</p>\r\n            <div className=\"grid grid-cols-2 p-4 mt-10 gap-10\">\r\n                <div className=\"ring-4 bg-white rounded-lg shadow\">\r\n                    <div>\r\n                        <p className=\"font-semibold text-center underline text-lg p-3\"> Instructions: Score at least a 7 out of 10 in order to win and recieve a joke! </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-center text-lg ring-4 bg-white rounded-lg shadow font-bold\">\r\n                    <div>\r\n                    <h2 className=\"\"> Your current score is: {score}</h2>\r\n                    </div>\r\n                    <div>\r\n                       <p className=\"\"> Question: {question + 1} / 10 </p> \r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header\r\n","import {useState, useEffect} from 'react';\r\n\r\n\r\nconst Question = ({handleAnswer, handleNextQuestion, showAnswers, result:{question, correct_answer, answers}}) => { \r\n\r\n    return (\r\n    <div className=\"font-bold mt-10 \"> \r\n      <div className=\"underline bg-white text-black-500 text-center p-10 rounded-lg shadow-lg ring-4\">\r\n        <h2 className=\"text-2xl\" dangerouslySetInnerHTML={{__html: question}}></h2>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 gap-4 mt-4\">\r\n          {answers.map((answer) => {\r\n              const bgColor = showAnswers ? answer === correct_answer ? `bg-green-300`:`bg-red-300`: `bg-white hover:bg-gray-200`;  \r\n              const textColor = showAnswers ? answer === correct_answer ? 'text-white': `text-white`: `text-blue-500 text-xl`;\r\n            return (\r\n              <button className={`${bgColor} ring-4 p-4 ${textColor} font-bold rounded shadow`}\r\n              onClick={() => handleAnswer(answer)} dangerouslySetInnerHTML={{__html: answer}}></button>\r\n            )\r\n          })}\r\n      </div>\r\n        {showAnswers && (\r\n          <button onClick={handleNextQuestion} className=\"bg-blue-600 font-bold text-bold p-4 mt-6 rounded shadow \">\r\n            Next Question\r\n          </button>\r\n        )}\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Question;\r\n","import axios from 'axios';\nimport {useState, useEffect} from 'react';\nimport EndGame from './components/EndGame';\nimport Header from './components/Header';\nimport Question from './components/Question';\n\n\n//import trivia from `./components/trivia`\n\nconst App = () =>  {\n\n  const [questions, setQuestions] = useState([]);\n  const[currentIndex, setCurrentIndex] = useState(0);\n  const[score, setScore] = useState(0); \n  const[gameOver, setGameOver] = useState(false);\n  const[showAnswers, setShowAnswers] = useState(false); \n  const[joke, setJoke] = useState(undefined);\n\n\n\n\n  useEffect(() => {\n\n    const fetchData = async () => { \n      const questionaire = await axios('https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple'); \n      const joke = await axios(`https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=twopart`);\n\n      const questions = questionaire.data.results.map((question) => ({\n        ...question, answers: [ \n          question.correct_answer, \n          ...question.incorrect_answers].sort(() => Math.random()-0.5)\n      }));\n      setQuestions(questions);\n      setJoke(joke.data); \n    }\n    fetchData();\n    \n\n  }, []);\n\n  const handleAnswer = (answer) => { \n    \n    if(!showAnswers){ \n      if(answer === questions[currentIndex].correct_answer){ \n        setScore(score + 1); \n      }\n    }\n    \n    setShowAnswers(true);\n\n    if(currentIndex >= questions.length -1 ) { \n      setGameOver(true); \n    }\n  };  \n\n\n  const handleNextQuestion = () => { \n    \n    setShowAnswers(false); \n\n    setCurrentIndex(currentIndex + 1);\n\n  };\n\n  const refreshPage = () => { \n    window.location.reload(); \n  }\n    \n  \n  return  questions.length > 0 ? (\n    <div className=\"container absolute\">\n      {gameOver ? (\n        <EndGame score={score} joke={joke} refreshPage={refreshPage}/>\n      ):(\n        <div>\n          <Header score={score} question={currentIndex}/>\n          <Question result={questions[currentIndex]} handleNextQuestion={handleNextQuestion} showAnswers={showAnswers} handleAnswer={handleAnswer}/> \n        </div>\n        \n      )}   \n    </div>\n    ) : (\n      <h1 className=\"font-bold text-white justify-center\"> Hold up wait a minute, ya'll thougt I was finished...</h1>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}